{
  // CODE.JOBS API SERVER CONFIGURATION
  // -----------------------------------------------------------------------------------------------
  // This JSON5 file contains all settings for the API Server.
  // The "*" key contains base settings for all environments.
  // You can override a base setting by specifying the same key under another environment namespace.
  //
  // You can also override each value by using environment variables.
  // Nested variables can be overwritten by replacing the dot (".") with an underscore.
  // For example, the SERVER.PORT option would become SERVER_PORT on the command line.
  // -----------------------------------------------------------------------------------------------

  "*": {
    // The application name
    "APPLICATION_NAME": "Code Jobs API",
    // A shorter version of application name
    "COMPANY_NAME": "Code Jobs",
    // The logging level
    "LOG_LEVEL": "info",
    // If true, "first run" tasks will be run.
    // This includes setting up database users, etc.
    // This will only run in a *non* production environment, otherwise, it will be ignored.
    "FIRST_RUN": false,
    "SERVER": {
      // HTTPS options as passed to https.createServer([options]).
      // If an object is provided here, HTTPS will be used instead of HTTP.
      "HTTPS_CONFIG": null,
      // The port for the HTTP/HTTPS server to listen on.
      // Default is 1337
      "PORT": 1337,
      // The maximum number of requests allower per ip, per minute.
      // Set to 0 (zero) to disable
      "REQUESTS_PER_MINUTE_LIMIT": 250,
      // Extra headers.
      // This is useful on a per-environment basis.
      "EXTRA_HEADERS": null,
      // Headers to ignore.
      // This is useful on a per-environment basis.
      "DISABLE_HEADERS": null,
      // If true, routes that have the property "requiresValidAppId" set to true,
      // will require a valid "X-Application-Identifier" header value that maps
      // to an application record within the applications table.
      "APP_ID_VALIDATION_ENABLED": true,
      // A list of middlewares to disable (by export name)
      // This is a set of key/value pairs where key is the middleware export name and value is
      // a boolean (true for enabled, false for disabled).
      "DISABLED_MIDDLEWARES": {},
      // A list of route categories to disable (by export name)
      // This is a set of key/value pairs where key is the middleware export name and value is
      // a boolean (true for enabled, false for disabled).
      "DISABLED_ROUTES": {},
      // Disable route permissions and EXPOSE all routes to all users.
      // *** This setting is IGNORED in production ***
      "DISABLE_ROUTE_PERMISSIONS": false,
      // CORS Header Settings
      // Used by the CORS middleware, disabled the "cors" middleware will make these
      // settings irrelevant. These can be set to null to ignore a specific header.
      "CORS": {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Max-Age": 600,
        "Access-Control-Allow-Credentials": false,
        "Access-Control-Allow-Headers": [
          "Content-Type",
          "X-Requested-With",
          "X-Appplication-Identifier"
        ],
        "Access-Control-Allow-Methods": [
          "GET",
          "POST",
          "OPTIONS"
        ]
      }
    },
    "CLUSTER": {
      // The cluster scheduling policy. Must be one of [rr|os].
      // @see https://nodejs.org/api/cluster.html#cluster_cluster_schedulingpolicy
      "SCHEDULING_POLICY": "rr",
      // The number of worker processes to fork.
      // IF <= 0, the number of available CPU cores - 1 will be used.
      "WORKER_COUNT": 0,
      // The PERCENTAGE of workers that must remain alive. Otherwise, the master process will
      // exit with an error.
      "WORKER_MIN_COUNT_PERCENTAGE": 0.8,
      // The number of restarts each worker is allowed to have before a fatal error is thrown.
      // This is *restarts* so, 2 restarts + 1 initial start is 3 starts total.
      "WORKER_RESTARTS_MAX": 2,
      // Sets each worker's restart count to zero after the provided number of milliseconds.
      // If <= 0 or falsy, the worker's restart count will never reset.
      "WORKER_RESTARTS_RESET_AFTER": 10000,
      // The number of milliseconds to delay before allowing *any* restarts.
      // This is useful in the event the worker file has a syntax error and the master will
      // immediately refork workers until "WORKER_RESTARTS_ALLOWED" is exceeded.
      "WORKER_RESTART_DELAY": 5000,
      // The amount of time in ms to delay between spawing worker processes.
      // A small delay here is necessary, so everything isn't forked all at once.
      "WORKER_DELAY_BETWEEN_SPAWNS": 250
    },
    "REDIS": {
      // Set to false to disable redis caching.
      "ENABLED": true,
      // The redis server's hostname.
      "HOST": "localhost",
      // The port the redis server is listening on.
      "PORT": 6379
    },
    "DATABASE": {
      // If true the database tables will be synced on startup.
      "SYNC": true,
      // The database hostname.
      "HOST": "localhost",
      // The port the database is listening on.
      "PORT": 3306,
      // Don't hard code authentication credentials!
      "USER": null,
      // Again, don't hard code authentication credentials!
      "PASS": null,
      // The default database to use.
      "SCHEMA": "codejobs",
      // Connection pool configuration.
      // This is passed to Sequelize:
      // @see http://docs.sequelizejs.com/en/v3/docs/getting-started/#setting-up-a-connection
      "POOL_CONFIG": {
        "idle": 5000,
        "min": 0,
        "max": 10
      },
      // The maximum allowable number of records per request
      "MAXIMUM_RECORD_COUNT": 500
    },
    "DATABASE_LOGGING": {
      // Set to false to disable database request/response logging
      "ENABLED": true,
      // What to log...
      // If REQUESTS is true, all requests will be logged.
      // If RESPONSES is true, all responses will be logged.
      "LOG": {
        "REQUESTS": true,
        "RESPONSES": true
      },
      // If true, the response body will also be stored in the response log.
      // This can get expensive, so it is disabled by default.
      "CAPTURE_RESPONSE_BODY": false
    },
    "SLACK_LOGGING": {
      // If true, logs will be sent to slack
      "ENABLED": true,
      // The Slack integration webhook URL
      "WEBHOOK_URL": "https://hooks.slack.com/services/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",
      // The channel name
      "CHANNEL": "#api",
      // THe name of the user who posts the log
      "USERNAME": "API Server Log",
      // The minimum log level to log
      "LEVEL": "error"
    },
    "HEARTBEAT": {
      // If true, a heartbeat message will be emitted to redis every INTERVAL ms.
      // This is also necessary to publish information on the /ping route.
      "ENABLED": true,
      "INTERVAL": 3000
    },
    "USER_ACCOUNTS": {
      // The crypto algorithm to hash user passwords with.
      "PASSWORD_HASH_ALGORITHM": "sha256",
      // Affects the validation of user passwords
      // Each of these must be a number >= 0
      "PASSWORD_VALIDATION": {
        "MIN_LENGTH": 8,
        "MAX_LENGTH": 24,
        "MUST_CONTAIN_LOWERCASE_CHARACTERS": 1,
        "MUST_CONTAIN_UPPERCASE_CHARACTERS": 1,
        "MUST_CONTAIN_NUMERIC_CHARACTERS": 1,
        "MUST_CONTAIN_NON_ALPHANUMERIC_CHARACTERS": 1
      }
    }
  },

  // Development Environment
  "development": {
    "LOG_LEVEL": "trace",
    "SERVER": {
      "DISABLE_ROUTE_PERMISSIONS": true,
      "APP_ID_VALIDATION_ENABLED": false,
      "REQUESTS_PER_MINUTE_LIMIT": 0,
      "EXTRA_HEADERS": {
        "X-Environment": "development"
      }
    },
    "CLUSTER": {
      "WORKER_MIN_COUNT_PERCENTAGE": 0.5,
      "WORKER_COUNT": 1
    },
    "DATABASE": {
      "USER": "root",
      "PASS": "Eastwood9518*"
    },
    "SLACK_LOGGING": {
      "ENABLED": false,
      "LEVEL": "fatal"
    },
    "HEARTBEAT": {
      "ENABLED": true,
      "INTERVAL": 1000
    }
  },

  // Test Environment
  "test": {
    "EXTENDS": "development",
    "SERVER": {
      "EXTRA_HEADERS": {
        "X-Environment": "test"
      }
    }
  },

  // Production Environment
  "production": {
    "LOG_LEVEL": "info",
    "SERVER": {
      "APP_ID_VALIDATION_ENABLED": true,
      "REQUESTS_PER_MINUTE_LIMIT": 500,
      "DISABLE_HEADERS": {
        "X-Application-Name": true,
        "X-Response-Time": true,
        "X-Request-Limit": true,
        "X-Requests-Remaining": true
      },
      "DISABLED_ROUTES": {
        "ping": true
      }
    },
    "DATABASE": {
      "SYNC": false
    },
    "SLACK_LOGGING": {
      "ENABLED": true,
      "LEVEL": "error"
    },
    "HEARTBEAT": {
      "ENABLED": true,
      "INTERVAL": 1000
    }
  }
}